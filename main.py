import tkinter as tk
from tkinter import filedialog
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from PIL import Image, ImageTk, ImageDraw, ImageFont
import cv2
import numpy as np
from tkinter import colorchooser
from tkinter import END
from tkinter import messagebox
from tkinter import simpledialog

class ImageProcessor:
    def __init__(self):
        self.window = ttk.Window(themename="litera")
        self.window.title("X·ª≠ l√Ω ·∫¢nh")
        
        # Th√™m c√°c bi·∫øn kh·ªüi t·∫°o cho l∆∞·ªõi
        self.grid_visible = False
        self.grid_cells = []
        
        # Th√™m d√≤ng n√†y ·ªü ƒë·∫ßu __init__
        style = ttk.Style()
        
        # ƒê·∫∑t k√≠ch th∆∞·ªõc c·ª≠a s·ªï b·∫±ng 80% m√†n h√¨nh v√† cƒÉn gi·ªØa
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        window_width = int(screen_width * 0.8)
        window_height = int(screen_height * 0.8)
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        self.window.geometry(f"{window_width}x{window_height}+{x}+{y}")

        # T·∫°o frame ch·ª©a c√°c n√∫t v·ªõi style m·ªõi
        button_frame = ttk.Frame(self.window, padding=10)
        button_frame.pack(fill=X, padx=20, pady=10)
        
        # Frame cho c√°c n√∫t ch√≠nh
        main_buttons = ttk.Frame(button_frame)
        main_buttons.pack(fill=X)
        
        buttons_container = ttk.Frame(main_buttons)
        buttons_container.pack(anchor=CENTER, expand=True)
        
        # C·∫≠p nh·∫≠t c√°c n√∫t v·ªõi style c·ªßa ttkbootstrap
        self.btn_choose = ttk.Button(
            buttons_container, 
            text="Ch·ªçn ·∫¢nh",
            command=self.choose_image,
            bootstyle="primary",
            width=15
        )
        self.btn_choose.pack(side=LEFT, padx=5)
        
        self.btn_process = ttk.Button(
            buttons_container,
            text="X·ª≠ l√Ω",
            command=self.process_image,
            bootstyle="success",
            width=15
        )
        self.btn_process.pack(side=LEFT, padx=5)
        
        self.btn_save = ttk.Button(
            buttons_container,
            text="L∆∞u ·∫¢nh", 
            command=self.save_image,
            bootstyle="info",
            width=15
        )
        self.btn_save.pack(side=LEFT, padx=5)

        # Th√™m n√∫t t·∫°o √¥ vu√¥ng v√†o buttons_container
        self.btn_create_box = ttk.Button(
            buttons_container,
            text="T·∫°o √î Vu√¥ng",
            command=self.create_selection_box,
            bootstyle="warning",
            width=15
        )
        self.btn_create_box.pack(side=LEFT, padx=5)

        # Th√™m n√∫t Clone v√†o buttons_container
        self.btn_clone = ttk.Button(
            buttons_container,
            text="Nh√¢n B·∫£n",
            command=self.clone_boxes,
            bootstyle="secondary",
            width=15
        )
        self.btn_clone.pack(side=LEFT, padx=5)

        # Th√™m n√∫t Hi·ªán L∆∞·ªõi v√†o ƒë·∫ßu buttons_container
        self.btn_grid = ttk.Button(
            buttons_container,
            text="Hi·ªán L∆∞·ªõi",
            command=self.toggle_grid,
            bootstyle="primary-outline",
            width=15
        )
        self.btn_grid.pack(side=LEFT, padx=5)

        # C·∫≠p nh·∫≠t canvas frame v·ªõi style m·ªõi
        self.canvas_frame = ttk.Frame(self.window, bootstyle="secondary")
        self.canvas_frame.pack(fill=BOTH, expand=True, padx=20, pady=10)
        
        # Canvas v·ªõi m√†u n·ªÅn m·ªõi
        self.canvas = tk.Canvas(self.canvas_frame, bg='#ffffff')
        
        # Thanh cu·ªôn v·ªõi style ttkbootstrap
        self.scrollbar_y = ttk.Scrollbar(
            self.canvas_frame,
            orient=VERTICAL,
            command=self.canvas.yview,
            bootstyle="round"
        )
        self.scrollbar_x = ttk.Scrollbar(
            self.canvas_frame,
            orient=HORIZONTAL,
            command=self.canvas.xview,
            bootstyle="round"
        )

        # Thanh cu·ªôn v·ªõi style m·ªõi
        style.configure("Custom.Vertical.TScrollbar", arrowsize=16)
        style.configure("Custom.Horizontal.TScrollbar", arrowsize=16)
        
        self.scrollbar_y.pack(side=RIGHT, fill=Y)
        
        self.scrollbar_x.pack(side=BOTTOM, fill=X)
        
        self.canvas.configure(xscrollcommand=self.scrollbar_x.set, 
                             yscrollcommand=self.scrollbar_y.set)
        self.canvas.pack(side=LEFT, fill=BOTH, expand=True)
        
        # Th√™m c√°c bi·∫øn offset cho ·∫£nh
        self.image_offset_x = 0
        self.image_offset_y = 0
        
        # Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ ·∫£nh v√† t·ª∑ l·ªá zoom
        self.image = None
        self.photo = None
        self.zoom_factor = 1.0
        
        # Bind s·ª± ki·ªán chu·ªôt ƒë·ªÉ zoom
        self.canvas.bind("<MouseWheel>", self.mouse_wheel)
        
        # Th√™m bi·∫øn ƒë·ªÉ theo d√µi v√πng ƒë∆∞·ª£c ch·ªçn
        self.start_x = None
        self.start_y = None
        self.rect_id = None
        self.selection = None
        
        # Bind c√°c s·ª± ki·ªán chu·ªôt ƒë·ªÉ v·∫Ω khung ch·ªçn
        self.canvas.bind("<ButtonPress-1>", self.on_press)
        self.canvas.bind("<B1-Motion>", self.on_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)
        
        # Th√™m bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i k√©o
        self.drag_start = None
        self.is_panning = False
        
        # Bind cc s·ª± ki·ªán m·ªõi
        self.canvas.bind("<Control-MouseWheel>", self.mouse_wheel)  # Zoom v·ªõi Ctrl
        self.canvas.bind("<space>", self.start_pan_mode)  # B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô pan
        self.canvas.bind("<KeyRelease-space>", self.end_pan_mode)  # K·∫øt th√∫c ch·∫ø ƒë·ªô pan
        self.canvas.bind("<B1-Motion>", self.on_drag)  # X·ª≠ l√Ω k√©o
        self.canvas.focus_set()  # Cho ph√©p canvas nh·∫≠n input t·ª´ b√†n ph√≠m
        
        # T·∫°o frame properties c√≥ th·ªÉ toggle
        self.properties_frame = ttk.Frame(self.window)
        self.properties_visible = False  # ƒê·∫∑t tr·∫°ng th√°i m·∫∑c ƒë·ªãnh l√† ·∫©n
        
        # N√∫t toggle
        self.toggle_btn = ttk.Button(
            self.window,
            text="‚öô",  # Unicode icon cho settings
            command=self.toggle_properties,
            bootstyle="secondary",
            width=3
        )
        self.toggle_btn.place(relx=0.97, rely=0.02)  # ƒê·∫∑t ·ªü g√≥c ph·∫£i tr√™n
        
        # Ti√™u ƒë·ªÅ Properties
        ttk.Label(
            self.properties_frame,
            text="Properties",
            font=('Helvetica', 14, 'bold'),
            bootstyle="inverse-primary"
        ).pack(anchor=W, pady=(0, 10), fill=X)
        
        # Frame cho c√°c thu·ªôc t√≠nh v·ªõi style m·ªõi
        props_frame = ttk.Frame(self.properties_frame)
        props_frame.pack(fill=X)
        
        # Font properties v·ªõi style m·ªõi
        font_frame = ttk.Labelframe(
            props_frame,
            text="Font",
            padding=10,
            bootstyle="primary"
        )
        font_frame.pack(fill=X, pady=5)
        
        # C·∫≠p nh·∫≠t c√°c entry v√† label v·ªõi style ttkbootstrap
        ttk.Label(font_frame, text="Family:", bootstyle="inverse").pack(anchor=W)
        self.font_family = ttk.Entry(
            font_frame,
            bootstyle="primary"
        )
        self.font_family.insert(0, "Roboto-Bold")
        self.font_family.pack(fill=X, pady=(0, 5))
        
        ttk.Label(font_frame, text="Size (px):", bootstyle="inverse").pack(anchor=W)
        self.font_size = ttk.Entry(
            font_frame,
            bootstyle="primary"
        )
        self.font_size.insert(0, "24")
        self.font_size.pack(fill=X, pady=(0, 5))
        
        color_container = ttk.Frame(font_frame)
        color_container.pack(fill=X)
        
        ttk.Label(color_container, text="Color:", bootstyle="inverse").pack(side=LEFT)
        
        # Frame ch·ª©a √¥ m√†u v√† n√∫t
        color_input_frame = ttk.Frame(color_container)
        color_input_frame.pack(side=LEFT, fill=X, expand=True)
        
        self.font_color = ttk.Entry(
            color_input_frame,
            bootstyle="primary"
        )
        self.font_color.insert(0, "#272727")
        self.font_color.pack(side=LEFT, fill=X, expand=True)
        
        # Ch·ªâ gi·ªØ l·∫°i n√∫t color picker
        self.color_btn = ttk.Button(
            color_input_frame,
            text="üé®",
            command=self.pick_color,
            width=3,
            bootstyle="secondary-outline"
        )
        self.color_btn.pack(side=LEFT, padx=(5, 0))
        
        # Text properties v·ªõi style m·ªõi
        text_frame = ttk.Labelframe(
            props_frame,
            text="Text",
            padding=10,
            bootstyle="primary"
        )
        text_frame.pack(fill=X, pady=5)
        
        ttk.Label(text_frame, text="Content:", bootstyle="inverse").pack(anchor=W)
        self.text_content = ttk.Entry(
            text_frame,
            bootstyle="primary"
        )
        self.text_content.insert(0, "10")
        self.text_content.pack(fill=X)
        
        # Th√™m n√∫t Apply
        self.apply_btn = ttk.Button(
            text_frame,
            text="Apply All",
            command=self.apply_to_all,
            bootstyle="primary-outline",
            width=10
        )
        self.apply_btn.pack(pady=(5,0))
        
        # Th√™m bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ c√°c v·ªã tr√≠ c·ªßa s 10
        self.number_positions = []
        
        # Th√™m ƒë∆∞·ªùng d·∫´n font v√†o properties
        self.font_path = "assets/fonts/Roboto-Bold.ttf"  # ƒê·∫∑t file font c·ªßa b·∫°n v√†o th∆∞ m·ª•c fonts
        
        # Th√™m c√°c bi·∫øn m·ªõi ƒë·ªÉ theo d√µi tr·∫°ng th√°i c·ªßa √¥ vu√¥ng
        self.box_dragging = False
        self.box_resizing = False
        self.resize_handle = None
        self.default_box_size = 100  # K√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh c·ªßa √¥ vu√¥ng
        self.box_list = []  # Th√™m d√≤ng n√†y

        # Bind c√°c s·ª± ki·ªán m·ªõi
        self.canvas.bind("<B1-Motion>", self.on_drag)
        self.canvas.bind("<ButtonPress-1>", self.on_press)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)
        self.canvas.bind("<Motion>", self.on_motion)
        
        # Th√™m c√°c bi·∫øn m·∫∑c ƒë·ªãnh cho l∆∞·ªõi
        self.grid_cols = 3
        self.grid_rows = 5
        self.cell_width = 180
        self.cell_height = 45
        self.horizontal_gap = 8
        self.vertical_gap = 60.5
    
    def mouse_wheel(self, event):
        if event.state & 0x4:  # Ki·ªÉm tra ph√≠m Ctrl
            # X·ª≠ l√Ω zoom
            if event.delta > 0:
                self.zoom_in()
            else:
                self.zoom_out()
        else:
            # Cu·ªôn d·ªçc khi kh√¥ng nh·∫•n Ctrl
            self.canvas.yview_scroll(-1 * (event.delta // 120), "units")
    
    def zoom_in(self):
        self.zoom_factor *= 1.1
        self.update_image()
    
    def zoom_out(self):
        self.zoom_factor *= 0.9
        self.update_image()
    
    def update_image(self):
        if self.image is not None:
            # L∆∞u tr·ªØ th√¥ng tin v·ªÅ l∆∞·ªõi hi·ªán t·∫°i
            grid_info = None
            if self.grid_visible:
                grid_info = [(self.canvas.coords(cell['id']), self.canvas.itemcget(cell['id'], 'outline'))
                            for cell in self.grid_cells]
            
            # Chuy·ªÉn ƒë·ªïi ·∫£nh OpenCV sang PIL Image
            img = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(img)
            
            # T√≠nh k√≠ch th∆∞·ªõc m·ªõi d·ª±a tr√™n zoom_factor
            new_width = int(img.width * self.zoom_factor)
            new_height = int(img.height * self.zoom_factor)
            
            # Resize ·∫£nh
            img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # Chuy·ªÉn ƒë·ªïi sang PhotoImage
            self.photo = ImageTk.PhotoImage(img)
            
            # C·∫≠p nh·∫≠t canvas v√† cƒÉn gi·ªØa ·∫£nh
            self.canvas.delete("all")
            canvas_width = self.canvas.winfo_width()
            canvas_height = self.canvas.winfo_height()
            
            # C·∫≠p nh·∫≠t offset
            self.image_offset_x = max(0, (canvas_width - new_width) // 2)
            self.image_offset_y = max(0, (canvas_height - new_height) // 2)
            
            # V·∫Ω ·∫£nh v·ªõi offset m·ªõi
            self.canvas.create_image(
                self.image_offset_x,
                self.image_offset_y,
                image=self.photo,
                anchor="nw"
            )
            
            # Kh√¥i ph·ª•c l∆∞·ªõi n·∫øu ƒëang hi·ªÉn th·ªã
            if grid_info:
                self.grid_cells.clear()
                for coords, outline in grid_info:
                    cell = self.canvas.create_rectangle(
                        coords[0], coords[1], coords[2], coords[3],
                        outline=outline,
                        width=2,
                        tags='grid_cell'
                    )
                    self.grid_cells.append({
                        'id': cell,
                        'coords': coords
                    })
            
            # C·∫≠p nh·∫≠t v√πng scroll
            self.canvas.configure(scrollregion=self.canvas.bbox("all"))
    
    def choose_image(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp *.gif *.tiff")]
        )
        if file_path:
            self.image = cv2.imread(file_path)
            self.zoom_factor = 1.0
            self.update_image()
    
    def on_press(self, event):
        """X·ª≠ l√Ω khi nh·∫•n chu·ªôt"""
        if self.is_panning:
            return

        canvas_x = self.canvas.canvasx(event.x)
        canvas_y = self.canvas.canvasy(event.y)

        # Ki·ªÉm tra xem c√≥ ƒëang b·∫•m v√†o handle kh√¥ng
        items = self.canvas.find_closest(canvas_x, canvas_y)
        if items and 'handle' in self.canvas.gettags(items[0]):
            self.box_resizing = True
            self.rect_id = None
            for rect, handle in self.box_list:
                if handle == items[0]:
                    self.rect_id = rect
                    break
            return

        # Ki·ªÉm tra xem c√≥ ƒëang b·∫•m v√†o √¥ vu√¥ng kh√¥ng
        items = self.canvas.find_overlapping(canvas_x-2, canvas_y-2, canvas_x+2, canvas_y+2)
        for item in items:
            if 'box' in self.canvas.gettags(item):
                self.box_dragging = True
                self.drag_start = (canvas_x, canvas_y)
                self.rect_id = item
                return
    
    def on_drag(self, event):
        """X·ª≠ l√Ω khi k√©o chu·ªôt"""
        if self.is_panning:
            # X·ª≠ l√Ω pan mode
            self.canvas.scan_dragto(event.x, event.y, gain=1)
            return

        canvas_x = self.canvas.canvasx(event.x)
        canvas_y = self.canvas.canvasy(event.y)

        if self.box_dragging and self.rect_id:
            # Di chuy·ªÉn √¥ vu√¥ng
            dx = canvas_x - self.drag_start[0]
            dy = canvas_y - self.drag_start[1]
            self.canvas.move(self.rect_id, dx, dy)
            self.canvas.move(self.resize_handle, dx, dy)
            self.drag_start = (canvas_x, canvas_y)
            self.update_selection()
            
            # Ki·ªÉm tra xem √¥ vu√¥ng c√≥ n·∫±m trong v√πng ·∫£nh kh√¥ng
            box_coords = self.canvas.coords(self.rect_id)
            image_bounds = (
                self.image_offset_x,
                self.image_offset_y,
                self.image_offset_x + self.image.shape[1] * self.zoom_factor,
                self.image_offset_y + self.image.shape[0] * self.zoom_factor
            )
            
            # N·∫øu √¥ vu√¥ng n·∫±m ho√†n to√†n trong v√πng ·∫£nh
            if (box_coords[0] >= image_bounds[0] and 
                box_coords[1] >= image_bounds[1] and 
                box_coords[2] <= image_bounds[2] and 
                box_coords[3] <= image_bounds[3]):
                # Highlight √¥ vu√¥ng b·∫±ng m√†u xanh
                self.canvas.itemconfig(self.rect_id, outline='green')
            else:
                # ƒê·ªïi l·ªói m√†u ƒë·ªè n·∫øu ·ªü ngo√†i
                self.canvas.itemconfig(self.rect_id, outline='red')

        elif self.box_resizing and self.rect_id:
            # Thay ƒë·ªïi k√≠ch th∆∞·ªõc √¥ vu√¥ng
            bbox = self.canvas.coords(self.rect_id)
            self.canvas.coords(self.rect_id, bbox[0], bbox[1], canvas_x, canvas_y)
            self.canvas.coords(self.resize_handle,
                             canvas_x - 5, canvas_y - 5,
                             canvas_x + 5, canvas_y + 5)
            self.update_selection()
    
    def update_selection(self):
        """C·∫≠p nh·∫≠t selection d·ª±a tr√™n v·ªã tr√≠ hi·ªán t·∫°i c·ªßa √¥ vu√¥ng"""
        if self.rect_id:
            bbox = self.canvas.coords(self.rect_id)
            self.selection = (
                int((bbox[0] - self.image_offset_x) / self.zoom_factor),
                int((bbox[1] - self.image_offset_y) / self.zoom_factor),
                int((bbox[2] - self.image_offset_x) / self.zoom_factor),
                int((bbox[3] - self.image_offset_y) / self.zoom_factor)
            )
    
    def on_release(self, event):
        """X·ª≠ l√Ω khi th·∫£ chu·ªôt"""
        if self.rect_id and self.box_dragging:
            # Ki·ªÉm tra xem √¥ vu√¥ng c√≥ n·∫±m trong v√πng ·∫£nh kh√¥ng
            box_coords = self.canvas.coords(self.rect_id)
            image_bounds = (
                self.image_offset_x,
                self.image_offset_y,
                self.image_offset_x + self.image.shape[1] * self.zoom_factor,
                self.image_offset_y + self.image.shape[0] * self.zoom_factor
            )
            
            # N·∫øu √¥ vu√¥ng n·∫±m ho√†n to√†n trong v√πng ·∫£nh
            if (box_coords[0] >= image_bounds[0] and 
                box_coords[1] >= image_bounds[1] and 
                box_coords[2] <= image_bounds[2] and 
                box_coords[3] <= image_bounds[3]):
                # Ch·ªâ c·∫≠p nh·∫≠t selection m√† kh√¥ng x·ª≠ l√Ω
                self.update_selection()
                # ƒê·ªïi m√†u th√†nh xanh ƒë·ªÉ ch·ªâ b√°o v·ªã tr√≠ h·ª£p l·ªá
                self.canvas.itemconfig(self.rect_id, outline='green')
        
        self.box_dragging = False
        self.box_resizing = False

    def process_image(self, save_position=True):
        if self.image is None or self.selection is None:
            return
        
        # Hi·ªÉn th·ªã dialog nh·∫≠p s·ªë
        text = simpledialog.askstring("Nh·∫≠p s·ªë", "Vui l√≤ng nh·∫≠p s·ªë:")
        if text is None:  # Ng∆∞·ªùi d√πng b·∫•m Cancel
            return
        
        # C·∫≠p nh·∫≠t text_content
        self.text_content.delete(0, END)
        self.text_content.insert(0, text)
        
        # Highlight v√πng ƒë∆∞·ª£c ch·ªçn
        x1, y1, x2, y2 = self.selection
        highlight = self.canvas.create_rectangle(
            x1 * self.zoom_factor + self.image_offset_x,
            y1 * self.zoom_factor + self.image_offset_y,
            x2 * self.zoom_factor + self.image_offset_x,
            y2 * self.zoom_factor + self.image_offset_y,
            outline='cyan',
            width=2
        )
        self.window.update()
        self.window.after(1000, lambda: self.canvas.delete(highlight))
        
        width = x2 - x1
        height = y2 - y1
        
        cv2.rectangle(self.image, (x1, y1), (x2, y2), (255,255,255), -1)
        
        font_size = int(self.font_size.get())
        color = tuple(int(self.font_color.get().lstrip('#')[i:i+2], 16) for i in (0, 2, 4))
        
        try:
            # T·∫°o ·∫£nh t·∫°m v·ªõi k√≠ch th∆∞·ªõc v√πng ƒë∆∞·ª£c ch·ªçn
            temp_img = Image.new('RGBA', (width, height), (255, 255, 255, 0))
            draw = ImageDraw.Draw(temp_img)
            
            # X·ª≠ l√Ω text ƒë∆°n gi·∫£n h∆°n
            x_offset = 0
            # T√≠nh t·ªïng chi·ªÅu r·ªông c·ªßa text
            font = ImageFont.truetype(self.font_path, font_size)
            total_width = draw.textbbox((0, 0), text, font=font)[2]
            x_offset = (width - total_width) // 2
            
            # T√≠nh chi·ªÅu cao c·ªßa text
            text_height = draw.textbbox((0, 0), text, font=font)[3]
            y_pos = (height - text_height) // 2
            
            # V·∫Ω to√†n b·ªô text m·ªôt l·∫ßn
            draw.text((x_offset, y_pos), text, font=font, fill=color[::-1] + (255,))
            
            # Chuy·ªÉn ƒë·ªïi sang numpy array
            temp_array = np.array(temp_img)
            b, g, r, a = cv2.split(temp_array)
            temp_bgr = cv2.merge([b, g, r])
            mask = a / 255.0
            
            # ƒê·∫∑t text l√™n ·∫£nh g·ªëc
            roi = self.image[y1:y2, x1:x2]
            for c in range(3):
                roi[:, :, c] = roi[:, :, c] * (1 - mask) + temp_bgr[:, :, c] * mask
            
            self.image[y1:y2, x1:x2] = roi
            
        except Exception as e:
            print(f"L·ªói khi x·ª≠ l√Ω font: {e}")
            # Fallback v·ªÅ ph∆∞∆°ng th·ª©c c≈© n·∫øu c√≥ l·ªói
            
        if save_position:
            self.number_positions.append(self.selection)
        self.selection = None
        if self.rect_id:
            self.canvas.delete(self.rect_id)
            
        self.update_image()
    
    def start_pan_mode(self, event):
        self.is_panning = True
        self.canvas.config(cursor="hand2")

    def end_pan_mode(self, event):
        self.is_panning = False
        self.canvas.config(cursor="")
        self.drag_start = None

    def save_image(self):
        if self.image is None:
            return
        
        file_path = filedialog.asksaveasfilename(
            defaultextension=".png",
            filetypes=[
                ("PNG files", "*.png"),
                ("JPEG files", "*.jpg"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            cv2.imwrite(file_path, self.image)
    
    def toggle_properties(self):
        """Toggle hi·ªÉn th·ªã/·∫©n properties panel"""
        if self.properties_visible:
            self.properties_frame.place_forget()
            self.properties_visible = False
        else:
            self.properties_frame.place(
                relx=0.75,
                rely=0,
                relwidth=0.25,
                relheight=1
            )
            self.properties_visible = True
    
    def run(self):
        self.window.mainloop()
    
    def apply_to_all(self):
        """√Åp d·ª•ng text m·ªõi cho t·∫•t c·∫£ c√°c s·ªë ƒë√£ th√™m"""
        if not self.number_positions or self.image is None:
            return
            
        # L∆∞u selection hi·ªán t·∫°i
        current_selection = self.selection
        positions = self.number_positions.copy()
        
        # X·ª≠ l√Ω t·ª´ng v·ªã tr√≠
        for pos in positions:
            self.selection = pos
            self.process_image(save_position=False)  # S·∫Ω hi·ªÉn th·ªã dialog cho m·ªói √¥
            
        # Kh√¥i ph·ª•c selection
        self.selection = current_selection
        
        # C·∫≠p nh·∫≠t hi·ªÉn th·ªã
        self.update_image()
    
    def pick_color(self):
        """M·ªü color picker dialog"""
        color = colorchooser.askcolor(self.font_color.get())
        if color[1]:  # N·∫øu ng∆∞·ªùi d√πng kh√¥ng b·∫•m Cancel
            self.font_color.delete(0, END)
            self.font_color.insert(0, color[1])
    
    def create_selection_box(self):
        """T·∫°o m·ªôt √¥ ch·ªØ nh·∫≠t m·ªõi ·ªü gi·ªØa canvas"""
        if self.image is None:
            return

        # L·∫•y k√≠ch th∆∞·ªõc t·ª´ √¥ tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
        if self.number_positions:  # Ki·ªÉm tra xem c√≥ v·ªã tr√≠ ƒë√£ x·ª≠ l√Ω n√†o kh√¥ng
            last_box = self.number_positions[-1]  # L·∫•y v·ªã tr√≠ cu·ªëi c√πng
            width = last_box[2] - last_box[0]  # L·∫•y width th·ª±c t·∫ø
            height = last_box[3] - last_box[1]  # L·∫•y height th·ª±c t·∫ø
            # Nh√¢n v·ªõi zoom_factor sau khi c√≥ k√≠ch th∆∞·ªõc th·ª±c
            scaled_width = width * self.zoom_factor
            scaled_height = height * self.zoom_factor
        else:
            scaled_width = self.default_box_size * self.zoom_factor
            scaled_height = self.default_box_size * self.zoom_factor

        # X√≥a √¥ c≈© n·∫øu c√≥
        if self.rect_id:
            self.canvas.delete(self.rect_id)
            self.canvas.delete(self.resize_handle)
            self.box_list = []  # Reset danh s√°ch

        # T√≠nh to√°n v·ªã tr√≠ gi·ªØa canvas
        center_x = self.image_offset_x + (self.image.shape[1] * self.zoom_factor) / 2
        center_y = self.image_offset_y + (self.image.shape[0] * self.zoom_factor) / 2

        # T·∫°o √¥ ch·ªØ nh·∫≠t m·ªõi
        x1 = center_x - scaled_width/2
        y1 = center_y - scaled_height/2
        x2 = center_x + scaled_width/2
        y2 = center_y + scaled_height/2

        self.rect_id = self.canvas.create_rectangle(
            x1, y1, x2, y2,
            outline='red',
            width=2,
            tags=('box', 'draggable')
        )

        # T·∫°o handle ƒë·ªÉ resize
        self.create_resize_handle(x2, y2)

        # C·∫≠p nh·∫≠t selection
        self.selection = (
            int((x1 - self.image_offset_x) / self.zoom_factor),
            int((y1 - self.image_offset_y) / self.zoom_factor),
            int((x2 - self.image_offset_x) / self.zoom_factor),
            int((y2 - self.image_offset_y) / self.zoom_factor)
        )
        
        # Th√™m √¥ v√†o danh s√°ch
        self.box_list.append((self.rect_id, self.resize_handle))
    
    def create_resize_handle(self, x, y):
        """T·∫°o handle ƒë·ªÉ resize ·ªü g√≥c ph·∫£i d∆∞·ªõi"""
        size = 10
        if self.resize_handle:
            self.canvas.delete(self.resize_handle)
        self.resize_handle = self.canvas.create_rectangle(
            x - size/2, y - size/2,
            x + size/2, y + size/2,
            fill='red',
            tags=('handle', 'draggable')
        )

    def on_motion(self, event):
        """X l√Ω khi di chuy·ªÉn chut"""
        if self.rect_id:
            canvas_x = self.canvas.canvasx(event.x)
            canvas_y = self.canvas.canvasy(event.y)
            
            # Ki·ªÉm tra xem chu·ªôt c√≥ g·∫ßn handle kh√¥ng
            handle_bbox = self.canvas.bbox(self.resize_handle)
            if handle_bbox:
                if (abs(canvas_x - handle_bbox[0]) < 10 and 
                    abs(canvas_y - handle_bbox[1]) < 10):
                    self.canvas.config(cursor="sizing")
                    return
            
            # Ki·ªÉm tra xem chu·ªôt c√≥ n·∫±m tr√™n √¥ vu√¥ng kh√¥ng
            items = self.canvas.find_overlapping(canvas_x-2, canvas_y-2, canvas_x+2, canvas_y+2)
            for item in items:
                if 'box' in self.canvas.gettags(item):
                    self.canvas.config(cursor="fleur")  # Con tr·ªè di chuy·ªÉn
                    return
            
            self.canvas.config(cursor="")  # Con tr·ªè m·∫∑c ƒë·ªãnh

    def clone_boxes(self):
        """Nh√¢n b·∫£n √¥ vu√¥ng hi·ªán t·∫°i"""
        if not self.rect_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng t·∫°o √¥ vu√¥ng tr∆∞·ªõc!")
            return
        
        try:
            # S·ª≠a d√≤ng n√†y: thay ttk.askstring b·∫±ng simpledialog.askstring
            num_copies = simpledialog.askstring("Nh√¢n b·∫£n", "Nh·∫≠p s·ªë l∆∞·ª£ng c·∫ßn nh√¢n b·∫£n:")
            if num_copies is None:  # Ng∆∞·ªùi d√πng b·∫•m Cancel
                return
            
            num_copies = int(num_copies)
            if num_copies <= 0:
                raise ValueError
            
            # L·∫•y k√≠ch th∆∞·ªõc v√† v tr√≠ c·ªßa √¥ vu√¥ng g·ªëc
            bbox = self.canvas.coords(self.rect_id)
            width = bbox[2] - bbox[0]
            height = bbox[3] - bbox[1]
            
            # Clone c√°c √¥ vu√¥ng m·ªõi
            for i in range(num_copies):
                # T·∫°o v·ªã tr√≠ m·ªõi, d·ªãch xu·ªëng d∆∞·ªõi m·ªôt ch√∫t
                x1 = bbox[0] + (i + 1) * 20
                y1 = bbox[1] + (i + 1) * 20
                x2 = x1 + width
                y2 = y1 + height
                
                # T·∫°o √¥ vu√¥ng m·ªõi
                new_rect = self.canvas.create_rectangle(
                    x1, y1, x2, y2,
                    outline='red',
                    width=2,
                    tags=('box', 'draggable')
                )
                
                # T·∫°o handle m·ªõi
                new_handle = self.canvas.create_rectangle(
                    x2 - 5, y2 - 5,
                    x2 + 5, y2 + 5,
                    fill='red',
                    tags=('handle', 'draggable')
                )
                
                # L∆∞u v√†o danh s√°ch
                self.box_list.append((new_rect, new_handle))
                
                # T·∫°o selection m·ªõi
                new_selection = (
                    int((x1 - self.image_offset_x) / self.zoom_factor),
                    int((y1 - self.image_offset_y) / self.zoom_factor),
                    int((x2 - self.image_offset_x) / self.zoom_factor),
                    int((y2 - self.image_offset_y) / self.zoom_factor))
                
                self.number_positions.append(new_selection)
                
        except ValueError:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë d∆∞∆°ng h·ª£p l·ªá!")

    def toggle_grid(self):
        """B·∫≠t/t·∫Øt hi·ªÉn th·ªã l∆∞·ªõi"""
        if self.image is None:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ·∫£nh tr∆∞·ªõc!")
            return

        if not self.grid_visible:
            # T·∫°o dialog ƒë·ªÉ nh·∫≠p th√¥ng s·ªë
            dialog = ttk.Toplevel(self.window)
            dialog.title("Th√¥ng s·ªë l∆∞·ªõi")
            
            # ƒê·∫∑t k√≠ch th∆∞·ªõc l·ªõn h∆°n cho dialog
            dialog_width = 500
            dialog_height = 700
            
            # L·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh
            screen_width = self.window.winfo_screenwidth()
            screen_height = self.window.winfo_screenheight()
            
            # T√≠nh to√°n v·ªã tr√≠ ƒë·ªÉ dialog n·∫±m gi·ªØa m√†n h√¨nh
            x = (screen_width - dialog_width) // 2
            y = (screen_height - dialog_height) // 2
            
            # ƒê·∫∑t k√≠ch th∆∞·ªõc v√† v·ªã tr√≠ cho dialog
            dialog.geometry(f"{dialog_width}x{dialog_height}+{x}+{y}")
            
            # T·∫°o frame ch√≠nh v·ªõi padding
            main_frame = ttk.Frame(dialog, padding="20")
            main_frame.pack(fill='both', expand=True)
            
            # T·∫°o c√°c bi·∫øn ƒë·ªÉ l∆∞u gi√° tr·ªã
            cols_var = tk.StringVar(value="3")
            rows_var = tk.StringVar(value="10")
            width_var = tk.StringVar(value="175")
            height_var = tk.StringVar(value="40")
            h_gap_var = tk.StringVar(value="18")
            v_gap_var = tk.StringVar(value="60.5")
            
            # T·∫°o c√°c label v√† entry v·ªõi font size l·ªõn h∆°n v√† padding
            style = ttk.Style()
            style.configure("Large.TLabel", font=("Helvetica", 12))
            style.configure("Large.TEntry", font=("Helvetica", 12))
            
            # T·∫°o c√°c label v√† entry
            ttk.Label(main_frame, text="S·ªë c·ªôt:", style="Large.TLabel").pack(pady=10)
            cols_entry = ttk.Entry(main_frame, textvariable=cols_var, width=30)
            cols_entry.pack(pady=5)
            
            ttk.Label(main_frame, text="S·ªë h√†ng:", style="Large.TLabel").pack(pady=10)
            rows_entry = ttk.Entry(main_frame, textvariable=rows_var, width=30)
            rows_entry.pack(pady=5)
            
            ttk.Label(main_frame, text="Chi·ªÅu r·ªông m·ªói c·ªôt (px):", style="Large.TLabel").pack(pady=10)
            width_entry = ttk.Entry(main_frame, textvariable=width_var, width=30)
            width_entry.pack(pady=5)
            
            ttk.Label(main_frame, text="Chi·ªÅu cao m·ªói c·ªôt (px):", style="Large.TLabel").pack(pady=10)
            height_entry = ttk.Entry(main_frame, textvariable=height_var, width=30)
            height_entry.pack(pady=5)
            
            ttk.Label(main_frame, text="Kho·∫£ng c√°ch ngang (px):", style="Large.TLabel").pack(pady=10)
            h_gap_entry = ttk.Entry(main_frame, textvariable=h_gap_var, width=30)
            h_gap_entry.pack(pady=5)
            
            ttk.Label(main_frame, text="Kho·∫£ng c√°ch d·ªçc (px):", style="Large.TLabel").pack(pady=10)
            v_gap_entry = ttk.Entry(main_frame, textvariable=v_gap_var, width=30)
            v_gap_entry.pack(pady=5)
            
            def apply_settings():
                try:
                    # L∆∞u c√°c gi√° tr·ªã v√†o bi·∫øn instance
                    self.grid_cols = int(cols_var.get())
                    self.grid_rows = int(rows_var.get())
                    self.cell_width = int(width_var.get())
                    self.cell_height = int(height_var.get())
                    self.horizontal_gap = int(h_gap_var.get())
                    self.vertical_gap = float(v_gap_var.get())
                    
                    dialog.destroy()
                    self.grid_visible = True
                    self.show_grid()
                    self.btn_grid.configure(text="·∫®n L∆∞·ªõi")
                    
                except ValueError:
                    messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!")
            
            # N√∫t Apply l·ªõn h∆°n
            ttk.Button(
                main_frame,
                text="√Åp d·ª•ng",
                command=apply_settings,
                bootstyle="primary",
                width=20
            ).pack(pady=30)
            
            # ƒê·∫∑t dialog ·ªü gi·ªØa c·ª≠a s·ªï ch√≠nh
            dialog.transient(self.window)
            dialog.grab_set()
            
        else:
            self.grid_visible = False
            self.hide_grid()
            self.btn_grid.configure(text="Hi·ªán L∆∞·ªõi")

    def show_grid(self):
        """Hi·ªÉn th·ªã l∆∞·ªõi"""
        # X√≥a l∆∞·ªõi c≈© n·∫øu c√≥
        self.hide_grid()
        
        # S·ª≠ d·ª•ng c√°c th√¥ng s·ªë ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
        cell_width = self.cell_width * self.zoom_factor
        cell_height = self.cell_height * self.zoom_factor
        horizontal_gap = self.horizontal_gap * self.zoom_factor
        vertical_gap = self.vertical_gap * self.zoom_factor
        
        # T√≠nh to√°n chi·ªÅu cao t·ªïng c·ªßa l∆∞·ªõi
        total_height = self.grid_rows * (cell_height + vertical_gap) - vertical_gap
        
        # V·∫Ω l∆∞·ªõi v·ªõi s·ªë c·ªôt v√† h√†ng ƒë√£ c·∫•u h√¨nh
        for row in range(self.grid_rows):
            for col in range(self.grid_cols):
                x1 = self.image_offset_x + col * (cell_width + horizontal_gap)
                y1 = self.image_offset_y + row * (cell_height + vertical_gap)
                x2 = x1 + cell_width
                y2 = y1 + cell_height
                
                cell = self.canvas.create_rectangle(
                    x1, y1, x2, y2,
                    outline='red',
                    width=2,
                    tags='grid_cell'
                )
                
                self.grid_cells.append({
                    'id': cell,
                    'row': row,
                    'col': col,
                    'coords': (x1, y1, x2, y2)
                })
                
                # Th√™m ƒë∆∞·ªùng line d·ªçc m√†u xanh ƒëi qua t√¢m c·ªßa m·ªói √¥
                if row == 0:  # Ch·ªâ v·∫Ω line ·ªü h√†ng ƒë·∫ßu ti√™n
                    # T√≠nh to√°n t√¢m ƒëi·ªÉm c·ªßa √¥
                    center_x = x1 + cell_width/2
                    
                    self.canvas.create_line(
                        center_x, self.image_offset_y, 
                        center_x, self.image_offset_y + total_height,
                        fill='blue',
                        width=1,
                        tags=('grid_line', 'grid_cell')
                    )
        
        # Bind c√°c s·ª± ki·ªán cho canvas
        self.canvas.bind('<ButtonPress-1>', self.on_grid_press)
        self.canvas.bind('<B1-Motion>', self.on_grid_drag)
        self.canvas.bind('<ButtonRelease-1>', self.on_grid_release)

    def hide_grid(self):
        """·∫®n l∆∞·ªõi"""
        self.canvas.delete('grid_cell')
        self.canvas.delete('grid_line')  # Th√™m x√≥a c√°c ƒë∆∞·ªùng line
        self.grid_cells.clear()

    def on_grid_press(self, event):
        """X·ª≠ l√Ω khi nh·∫•n chu·ªôt"""
        if not self.grid_visible:
            return
        
        # L·∫•y t·ªça ƒë·ªô click
        x = self.canvas.canvasx(event.x)
        y = self.canvas.canvasy(event.y)
        
        # Ki·ªÉm tra xem c√≥ click v√†o √¥ l∆∞·ªõi kh√¥ng
        items = self.canvas.find_overlapping(x-2, y-2, x+2, y+2)
        for item in items:
            if 'grid_cell' in self.canvas.gettags(item):
                self.grid_drag_start = (x, y)
                return

    def on_grid_drag(self, event):
        """X·ª≠ l√Ω khi k√©o l∆∞·ªõi"""
        if not self.grid_visible or self.grid_drag_start is None:
            return
        
        # T√≠nh kho·∫£ng c√°ch di chuy·ªÉn
        x = self.canvas.canvasx(event.x)
        y = self.canvas.canvasy(event.y)
        dx = x - self.grid_drag_start[0]
        dy = y - self.grid_drag_start[1]
        
        # Di chuy·ªÉn t·∫•t c·∫£ c√°c √¥ l∆∞·ªõi
        self.canvas.move('grid_cell', dx, dy)
        
        # C·∫≠p nh·∫≠t t·ªça ƒë·ªô cho t·∫•t c·∫£ c√°c √¥
        for cell in self.grid_cells:
            x1, y1, x2, y2 = cell['coords']
            cell['coords'] = (x1 + dx, y1 + dy, x2 + dx, y2 + dy)
        
        # C·∫≠p nh·∫≠t v·ªã tr√≠ b·∫Øt ƒë·∫ßu
        self.grid_drag_start = (x, y)

    def on_grid_release(self, event):
        """X·ª≠ l√Ω khi th·∫£ chu·ªôt"""
        if not self.grid_visible or self.grid_drag_start is None:
            return
        
        x = self.canvas.canvasx(event.x)
        y = self.canvas.canvasy(event.y)
        dx = abs(x - self.grid_drag_start[0])
        dy = abs(y - self.grid_drag_start[1])
        
        if dx < 5 and dy < 5:
            items = self.canvas.find_overlapping(x-2, y-2, x+2, y+2)
            for item in items:
                if 'grid_cell' in self.canvas.gettags(item):
                    # L∆∞u v·ªã tr√≠ hi·ªán t·∫°i c·ªßa t·∫•t c·∫£ c√°c √¥ l∆∞·ªõi v√† ƒë∆∞·ªùng line
                    current_grid_positions = []
                    current_line_positions = []
                    
                    for cell in self.grid_cells:
                        coords = self.canvas.coords(cell['id'])
                        current_grid_positions.append(coords)
                    
                    # L∆∞u v·ªã tr√≠ c·ªßa c√°c ƒë∆∞·ªùng line
                    for line in self.canvas.find_withtag('grid_line'):
                        coords = self.canvas.coords(line)
                        current_line_positions.append(coords)
                    
                    # Hi·ªÉn th·ªã dialog nh·∫≠p s·ªë
                    text = simpledialog.askstring("Nh·∫≠p s·ªë", "Vui l√≤ng nh·∫≠p s·ªë:")
                    if text is not None:
                        for cell in self.grid_cells:
                            if cell['id'] == item:
                                # Highlight √¥ ƒë∆∞·ª£c ch·ªçn
                                self.canvas.itemconfig(item, outline='cyan', width=2)
                                
                                # L·∫•y t·ªça ƒë·ªô hi·ªán t·∫°i c·ªßa √¥
                                current_coords = self.canvas.coords(item)
                                selection = (
                                    int((current_coords[0] - self.image_offset_x) / self.zoom_factor),
                                    int((current_coords[1] - self.image_offset_y) / self.zoom_factor),
                                    int((current_coords[2] - self.image_offset_x) / self.zoom_factor),
                                    int((current_coords[3] - self.image_offset_y) / self.zoom_factor))
                                
                                # V·∫Ω h√¨nh ch·ªØ nh·∫≠t tr·∫Øng
                                cv2.rectangle(
                                    self.image,
                                    (selection[0], selection[1]),
                                    (selection[2], selection[3]),
                                    (255, 255, 255),
                                    -1
                                )
                                
                                # Chu·∫©n b·ªã ƒë·ªÉ v·∫Ω text
                                font_size = int(self.font_size.get())
                                color = tuple(int(self.font_color.get().lstrip('#')[i:i+2], 16) for i in (0, 2, 4))
                                
                                # T·∫°o ·∫£nh t·∫°m v·ªõi k√≠ch th∆∞·ªõc v√πng ƒë∆∞·ª£c ch·ªçn
                                width = selection[2] - selection[0]
                                height = selection[3] - selection[1]
                                temp_img = Image.new('RGBA', (width, height), (255, 255, 255, 0))
                                draw = ImageDraw.Draw(temp_img)
                                
                                # X·ª≠ l√Ω text
                                font = ImageFont.truetype(self.font_path, font_size)
                                total_width = draw.textbbox((0, 0), text, font=font)[2]
                                text_height = draw.textbbox((0, 0), text, font=font)[3]
                                
                                x_offset = (width - total_width) // 2
                                y_pos = (height - text_height) // 2
                                
                                # V·∫Ω text
                                draw.text((x_offset, y_pos), text, font=font, fill=color[::-1] + (255,))
                                
                                # Chuy·ªÉn ƒë·ªïi v√† √°p d·ª•ng l√™n ·∫£nh g·ªëc
                                temp_array = np.array(temp_img)
                                b, g, r, a = cv2.split(temp_array)
                                temp_bgr = cv2.merge([b, g, r])
                                mask = a / 255.0
                                
                                roi = self.image[selection[1]:selection[3], selection[0]:selection[2]]
                                for c in range(3):
                                    roi[:, :, c] = roi[:, :, c] * (1 - mask) + temp_bgr[:, :, c] * mask
                                
                                self.image[selection[1]:selection[3], selection[0]:selection[2]] = roi
                                
                                # C·∫≠p nh·∫≠t hi·ªÉn th·ªã
                                self.update_image()
                                
                                # Kh√¥i ph·ª•c l∆∞·ªõi
                                self.show_grid()
                                
                                # Kh√¥i ph·ª•c v·ªã tr√≠ cho t·ª´ng √¥
                                for i, cell in enumerate(self.grid_cells):
                                    if i < len(current_grid_positions):
                                        self.canvas.coords(cell['id'], *current_grid_positions[i])
                                
                                # Kh√¥i ph·ª•c v·ªã tr√≠ cho c√°c ƒë∆∞·ªùng line
                                lines = self.canvas.find_withtag('grid_line')
                                for i, line in enumerate(lines):
                                    if i < len(current_line_positions):
                                        self.canvas.coords(line, *current_line_positions[i])
                                
                                # Reset highlight sau 500ms
                                self.canvas.after(500, lambda: self.canvas.itemconfig(item, outline='red', width=2))
                                break
        
        self.grid_drag_start = None

if __name__ == "__main__":
    app = ImageProcessor()
    app.run()
